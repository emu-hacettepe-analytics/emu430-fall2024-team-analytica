---
title: "Analysis"
---

```{r echo=TRUE, include=FALSE}
library(readxl)
library(dplyr)
library(stringr)
library(lubridate)
library(knitr)
library(DT)
```

```{r echo=TRUE, include=FALSE}
Sys.setlocale("LC_ALL", "Turkish")
```

```{r echo=TRUE, include=FALSE}
data_original <- read_excel("izbb-kaza-ariza-verileri.xlsx")

data_new <- data_original[!is.na(data_original$ISTIKAMET), ]

data_new$ISTIKAMET <- gsub("Alsancak|Alsancak İstikameti|Alsancak Gar|alsancak", "Alsancak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Buca|Buca Heykel", "Buca", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Konak|Konak Tüneli|Konak İstikameti", "Konak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Kemalpaşa|kemalpaşa|Kemalpaş", "Kemalpaşa", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Havalimanı|havalimanı", "Havalimanı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("İnciraltı|İnciraltı İstikameti", "İnciraltı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Üçkuyular|Üçkuyular Meydan", "Üçkuyular", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Sarnıç|Sarniç", "Sarnıç", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Fahrettin Altay|F.Altay|Fahrettin altay", "Fahrettin Altay", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Tersane|Tersanesi", "Tersane", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Otogar|Otogar Meydanı", "Otogar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Basmane|Basmane Gar", "Basmane", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Pınarbaşı|Pınarbaşo", "Pınarbaşı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Üçyol|üçyol|Üçyo", "Üçyol", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Karabağlar|karabağlar", "Karabağlar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Konak|konak", "Konak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Gündoğdu|Gündoğdu Mahallesi", "Gündoğdu", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Mahvel|Mahvel Kavşağı", "Mahvel", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Beyazevler|Beyaz Evler", "Beyazevler", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Adliye|Adliye Kavşağı", "Adliye", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Harmandalı|Harmandali", "Harmandalı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Yıkık Kemer|Yıkıkkemer|Yıkıkker", "Yıkıkkemer", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Karşıa", "Karşıyaka", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Liman D Kapısı", "Liman", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("otogar", "Otogar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("bornova", "Bornova", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Mai", "Mustafa Kemal Sahil", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Borsa|Borsa Kavşağı", "Borsa", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Çevre Yolu|Çevreyolu", "Çevreyolu", data_new$ISTIKAMET)

data_new$TUR <- gsub("maddi Hasarlı|Maddi Hasarlı|MAddi Hasarlı", "Maddi Hasarlı", data_new$TUR)
data_new$TUR <- gsub("Ölümlü", "Ölümlü Kaza", data_new$TUR)
data_new$TUR <- gsub("Yakıtı Biten", "Yakıt Bitimi", data_new$TUR)
data_new$TUR <- gsub("Yangın", "Yanan Araç", data_new$TUR)
data_new$TUR <- gsub("yaralanmalı Kaza", "Yaralanmalı Kaza", data_new$TUR)

# Calculate the number of data for each destination

counts <- data_new %>%
  group_by(ISTIKAMET) %>%
  summarise(count = n())

# Finding direction values with less than 5 data

istikamet_to_remove <- counts %>%
  filter(count < 5) %>%
  pull(ISTIKAMET)

# Delete them from the data set

data_new <- data_new %>%
  filter(!ISTIKAMET %in% istikamet_to_remove)

# Calculate the time between accident time and intervention time and add it as a new column

data_new$GECEN_SURE <- difftime(data_new$MUDAHALE_ZAMANI, data_new$KAZA_ZAMANI, units = "mins")

# Taking into account the day difference for interventions arriving after midnight

data_new <- data_new %>%
  mutate(
    GECEN_SURE = ifelse(
      MUDAHALE_ZAMANI < KAZA_ZAMANI, 
      difftime(MUDAHALE_ZAMANI + days(1), KAZA_ZAMANI, units = "mins"),
      difftime(MUDAHALE_ZAMANI, KAZA_ZAMANI, units = "mins")
    )
  )

# Calculate the average response time for each destination

data_new <- data_new %>%
  group_by(ISTIKAMET) %>%
  mutate(ORTALAMA_GECEN_SURE = mean(GECEN_SURE, na.rm = TRUE))

# Fill each NA value for GECEN_SURE with the average time of the direction it is connected to

data_new <- data_new %>%
  mutate(GECEN_SURE = ifelse(is.na(GECEN_SURE), ORTALAMA_GECEN_SURE, GECEN_SURE))

str(data_new)
```

## ANALYSIS OF THE DATA SET

```{r}
data_original <- read_excel("izbb-kaza-ariza-verileri.xlsx")
data_new <- data_original[!is.na(data_original$ISTIKAMET), ]
data_new$ISTIKAMET <- gsub("Alsancak|Alsancak İstikameti|Alsancak Gar|alsancak", "Alsancak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Buca|Buca Heykel", "Buca", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Konak|Konak Tüneli|Konak İstikameti", "Konak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Kemalpaşa|kemalpaşa|Kemalpaş", "Kemalpaşa", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Havalimanı|havalimanı", "Havalimanı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("İnciraltı|İnciraltı İstikameti", "İnciraltı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Üçkuyular|Üçkuyular Meydan", "Üçkuyular", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Sarnıç|Sarniç", "Sarnıç", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Fahrettin Altay|F.Altay|Fahrettin altay", "Fahrettin Altay", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Tersane|Tersanesi", "Tersane", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Otogar|Otogar Meydanı", "Otogar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Basmane|Basmane Gar", "Basmane", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Pınarbaşı|Pınarbaşo", "Pınarbaşı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Üçyol|üçyol|Üçyo", "Üçyol", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Karabağlar|karabağlar", "Karabağlar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Konak|konak", "Konak", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Gündoğdu|Gündoğdu Mahallesi", "Gündoğdu", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Mahvel|Mahvel Kavşağı", "Mahvel", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Beyazevler|Beyaz Evler", "Beyazevler", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Adliye|Adliye Kavşağı", "Adliye", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Harmandalı|Harmandali", "Harmandalı", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Yıkık Kemer|Yıkıkkemer|Yıkıkker", "Yıkıkkemer", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Karşıa", "Karşıyaka", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Liman D Kapısı", "Liman", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("otogar", "Otogar", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("bornova", "Bornova", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Mai", "Mustafa Kemal Sahil", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Borsa|Borsa Kavşağı", "Borsa", data_new$ISTIKAMET)
data_new$ISTIKAMET <- gsub("Çevre Yolu|Çevreyolu", "Çevreyolu", data_new$ISTIKAMET)
data_new$TUR <- gsub("maddi Hasarlı|Maddi Hasarlı|MAddi Hasarlı", "Maddi Hasarlı", data_new$TUR)
data_new$TUR <- gsub("Ölümlü|Ölümlü Kaza", "Ölümlü Kaza", data_new$TUR)
data_new$TUR <- gsub("Yakıtı Biten", "Yakıt Bitimi", data_new$TUR)
data_new$TUR <- gsub("Yangın", "Yanan Araç", data_new$TUR)
data_new$TUR <- gsub("yaralanmalı Kaza", "Yaralanmalı Kaza", data_new$TUR)
counts <- data_new %>%
  group_by(ISTIKAMET) %>%
  summarise(count = n())

# Finding direction values with less than 5 data

istikamet_to_remove <- counts %>%
  filter(count < 5) %>%
  pull(ISTIKAMET)

# Delete them from the data set

data_new <- data_new %>%
  filter(!ISTIKAMET %in% istikamet_to_remove)

data_new$GECEN_SURE <- difftime(data_new$MUDAHALE_ZAMANI, data_new$KAZA_ZAMANI, units = "mins")

# Taking into account the day difference for interventions arriving after midnight

data_new <- data_new %>%
  mutate(
    GECEN_SURE = ifelse(
      MUDAHALE_ZAMANI < KAZA_ZAMANI, 
      difftime(MUDAHALE_ZAMANI + days(1), KAZA_ZAMANI, units = "mins"),
      difftime(MUDAHALE_ZAMANI, KAZA_ZAMANI, units = "mins")
    )
  )
data_new <- data_new %>%
  group_by(ISTIKAMET) %>%
  mutate(ORTALAMA_GECEN_SURE = mean(GECEN_SURE, na.rm = TRUE))

# Fill each NA value for GECEN_SURE with the average time of the direction it is connected to

data_new <- data_new %>%
  mutate(GECEN_SURE = ifelse(is.na(GECEN_SURE), ORTALAMA_GECEN_SURE, GECEN_SURE))
data_2023 <- data_new %>%
  mutate(TARIH = as.Date(TARIH, format = "%Y-%m-%d")) %>%  # Changing date format to yyyy-mm-dd 
  filter(year(TARIH) == 2023)

datatable(data_2023, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Accident Data of Izmir  for the Year 2023") %>%
  DT::formatStyle(
    columns = colnames(data_2023), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'});
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   By using the "data_new" data set, we created the "data_2023".In this data set, we can see the accidents that occurred in 2023 filtered.

```{r}
data_2023 <- data_2023 %>%
  mutate(ISTIKAMET_SAYISI = as.numeric(factor(ISTIKAMET)))
grouped_data_2 <- data_2023 %>%
  group_by(ISTIKAMET) %>%  
  summarise(Total_Accidents = n())
datatable(grouped_data_2, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Number of Accidents by Direction (2023)") %>%
  DT::formatStyle(
    columns = colnames(grouped_data_2), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   By making a grouping of the accidents that took place in 2023 according to the directions, we examined how many accidents were made in which direction.

```{r}
sorted_grouped_data <- grouped_data_2 %>%
  arrange(desc(Total_Accidents))
datatable(sorted_grouped_data, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Number of Accidents by Direction (2023) - Descending Order") %>%
  DT::formatStyle(
    columns = colnames(sorted_grouped_data), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   We have sorted the accident numbers by destination points.

```{r}
library(ggplot2)

ggplot(sorted_grouped_data, aes(x = reorder(ISTIKAMET, Total_Accidents), y = Total_Accidents)) +
  geom_bar(stat = "identity", fill = "purple", color = "black") +
  coord_flip() +  
  labs(title = "Distribution of Accidents According to Directions (2023)", x = "Direction", y = "Frequency") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 6))

```

-   We have created a bar plot showing the distribution according to directions using our data set, the accident numbers of which have already been sorted to decreasing order.We can see that the most accidents occur in Merkez ,Bornova, Gaziemir, Konak and Çiğli.

```{r}
library(dplyr)
accidents_date <- data_2023 %>%
  group_by(TARIH) %>%  
  summarise(Accident_Number = n())
datatable(accidents_date, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Number of Accidents by Date (2023)") %>%
  DT::formatStyle(
    columns = colnames(accidents_date), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   We created a data set named "accidents_date" showing how many accidents happened on what date.

```{r}
library(dplyr)
most_accidents_date <- accidents_date %>%
  filter(Accident_Number == max(Accident_Number)) %>%  # The date(s) with most accidents
  pull(TARIH)
most_accidents_date
```

-   We found out which day the most accidents happened.It is 22 June of 2023.

```{r}
sorted_accidents_date <-accidents_date %>%
  arrange(desc(Accident_Number))
datatable(sorted_accidents_date, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Sequential Distribution of Accidents by Date (2023)") %>%
  DT::formatStyle(
    columns = colnames(sorted_accidents_date), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   We sorted these numbers in descending order and collect them in a data set named "sorted_accidents_date". Here you can also see the ten days with the most accidents.

```{r}
destination_accidents <- data_2023 %>%
  filter(TARIH %in% most_accidents_date) %>%  
  group_by(ISTIKAMET) %>%  #Grouping by directions
  summarise(Accident_Number = n()) %>%  
  arrange(desc(Accident_Number)) 
datatable(destination_accidents, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Accidents According to the Direction of the Most Accidents") %>%
  DT::formatStyle(
    columns = colnames(destination_accidents), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   On June 22, 2023, the day of the most accidents, we collected how many accidents were caused while going to which direction in the data set named "destination_accidents".

```{r}
library(ggplot2)

ggplot(destination_accidents, aes(x = reorder(ISTIKAMET, Accident_Number), y = Accident_Number)) +
  geom_bar(stat = "identity", fill = "brown", color = "black") +
  labs(title = "Accidents According to Directions on the Dates with the Most Accidents", x = "Destination", y = "Number of Accidents") +
  theme_minimal()
```

-   In order to better see the distribution, we had a bar plot drawn according to the direction.As we saw in the previous bar plot, the first three directions are again "Merkez","Gaziemir" and "Bornova".

```{r}
library(dplyr)
top_5_most_accident_dates <- accidents_date %>%
  arrange(desc(Accident_Number)) %>%  
  slice(1:5) %>%  #Selecting the first 5 rows
  pull(TARIH)
top_5_most_accident_dates
```

-   In our studies that we have done so far, we have found that the number of accidents is usually higher in the same directions.To better understand this, we also examine the first five days with the most accidentsWith the help of this code, we learn about the five days with the most accidents.

```{r}
destination_accidents_top_5 <- data_2023 %>%
  filter(TARIH %in% top_5_most_accident_dates) %>%  
  group_by(ISTIKAMET) %>%  
  summarise(Accident_Number = n()) %>%  # Calculating the accident number for each destination point.
  arrange(desc(Accident_Number))
datatable(destination_accidents_top_5, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Directions on the 5 Days with the Most Accidents") %>%
  DT::formatStyle(
    columns = colnames(destination_accidents_top_5), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   We have collected the distribution of the five most accident days according to the directions in the data set named "destination_accidents_top_5" and sorted them in descending order.

```{r, echo=TRUE, message=FALSE, warning=FALSE}
accidents_date_destination <- data_2023 %>%
  filter(TARIH %in% top_5_most_accident_dates) %>%  
  group_by(TARIH, ISTIKAMET) %>%  # Grouping by date and destination 
  summarise(Accident_Number = n()) %>%  # Calculating the number of accidents for each group
  arrange(TARIH, desc(Accident_Number))  
datatable(accidents_date_destination, 
          options = list(pageLength = 10, scrollX = TRUE), 
          caption = "Directions and Accidents on the 5 Dates with the Most Accidents") %>%
  DT::formatStyle(
    columns = colnames(accidents_date_destination), 
    fontSize = '10px'   
  ) %>%
  htmlwidgets::onRender(
    "function(el, x) {
        $(el).css({'width': '70%', 'height': '300px'});
        $(el).find('th').css({'font-size': '10px'}); 
        $(el).find('.dataTables_length').css({'font-size': '10px'});
        $(el).find('.dataTables_filter').css({'font-size': '10px'});
        $(el).find('.dataTables_paginate').css({'font-size': '10px'});
        $(el).find('.dataTables_info').css({'font-size': '10px'});
    }"
  )
```

-   With the help of this code, we have grouped the accidents on the five days with the most accidents according to the date and direction and sorted each date in descending order. and again, as we expected, the first three directions on three of the five days are "Merkez", "Gaziemir", "Bornova", while the remaining two days "Merkez" and "Gaziemir" are in the first two places.

```{r}
library(ggplot2)

ggplot(data_2023, aes(x = ISTIKAMET, y = GECEN_SURE)) +
  geom_boxplot(fill = "lightblue", color = "darkblue", outlier.color = "red", outlier.size = 2) +
  labs(
    title = "Response Time By Destinations",
    x = "Destination",
    y = "Response Time"
  ) +
  theme_minimal() + 
  theme(
    axis.text.x = element_text(angle = 45,size=6, hjust = 1),
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
    axis.text = element_text(size = 10)
  )
```

-   By utilizing the data we obtained, we analyzed how response times vary based on destinations and types of accidents, as well as how many accidents are distributed across destinations and time of day.

-   The Response Time By Destinations plot analyzes response times at different destinations, providing important information on median, average and variability.

<!-- -->

-   When we examine the plot, the average response time of most destinations is concentrated between 20-30 minutes, which shows general effective responses."Heykel," "Çeşme," and "Göztepe" show consistent distributions and predictable response times, demonstrating operational stability."Buca" and "Havalimanı" have wider distributions and higher averages, reflecting delays and inconsistencies."Merkez" exhibits significant variability and outliers, leading to increased average response times.

-   We examined the distribution of average response time according to accident types with a violin plot.

```{r}
library(ggplot2)
library(dplyr)

data_2023 <- data_2023 %>%
  mutate(TUR = case_when(
    TUR %in% c("Ölümlü Kaza Kaza Kaza Kaza Kaza", "Ölümlü Kaza Kaza Kaza Kaza Kaza Kaza") ~ "Ölümlü Kaza",
    TRUE ~ TUR  
  ))

ggplot(data_2023, aes(x = TUR, y = ORTALAMA_GECEN_SURE)) +
  geom_violin(fill = "lightgreen", color = "darkgreen") +
  labs(
    title = "Average Response Time By Accident Types",
    x = "Accident Type",
    y = "Average Response Time"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
  )  
```

-   Most accident types have response times concentrated between 20–30 minutes, indicating operational efficiency. Accidents like "Arızalı," "Yakıt Bitimi," and "Patlak Lastik" show the shortest and most consistent response times, with violin plots densely concentrated at lower durations. "Ölümlü Kaza" stands out with longer response times and broader distributions, reflecting the complexity of these cases."Yaralanmalı Kaza" has the widest distribution, indicating varied response times and highlighting areas for improvement in consistency.

-   We examined the distribution of accidents according to destinations during the day using a heatmap chart.

```{r}
library(ggplot2)
library(dplyr)
library(lubridate)

data_2023 <- data_2023 %>%
  mutate(
    HOUR = hour(as.POSIXct(KAZA_ZAMANI)), 
    TIME_PERIOD = ifelse(HOUR >= 8 & HOUR < 20, "Day (8 AM - 8 PM)", "Night (8 PM - 8 AM)")  
  )

heatmap_data <- data_2023 %>%
  group_by(ISTIKAMET, HOUR) %>%
  summarise(kaza_sayisi = n(), .groups = "drop") 

# Heatmap oluşturma
ggplot(heatmap_data, aes(x = HOUR, y = ISTIKAMET, fill = kaza_sayisi)) +
  geom_tile(color = "white") +  # Hücreler arasına beyaz çizgi
  scale_fill_gradientn(
    colors = c("lightblue", "yellow", "red"),
    name = "Number of Accidents"
  ) +  # Renk skalasını belirle
  labs(
    title = "Accidents Throughout the Day by Destination",
    subtitle = "Comparison of accident numbers across hours and destinations",
    x = "Hour of the Day",
    y = "Destination"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),  
    plot.subtitle = element_text(hjust = 0.5, size = 12),  
    axis.text.x = element_text(size = 10),  
    axis.text.y = element_text(size = 6.5), 
    legend.position = "right",  
    legend.text = element_text(size = 10),  
    legend.title = element_text(size = 12) 
  )
```

-   Certain times of the day (e.g., morning and evening commute hours) show increased accident intensity in specific destinations. Destinations such as "Bornova", "Gaziemir", and "Merkez" show high accident intensity. The red zones in these areas indicate a higher number of accidents, especially during the morning and evening rush hours. Destinations such as "Tersane", "Göztepe", and "Heykel" have fewer accidents and a more evenly distributed pattern.

-   In another section, we tried to determine whether there is a relationship between the monthly accident numbers in Izmir.

    ```{r}
    #If the column name is 'Date' and the format is "%Y-%m-%d":
    data_new$tarih <- as.Date(data_new$TARIH, format = "%Y-%m-%d")

    # Filtering 2023 data:
    data_2023 <- subset(data_new, format(data_new$tarih, "%Y") == "2023")

    data_2023$ay <- format(as.Date(data_2023$tarih), "%m") 
    # Month information (01, 02, ...)

    data_2023$ay <- as.numeric(data_2023$ay)
    # Storing monthly totals in a vector
    months <- 1:12
    total_values <- c(
      sum(data_2023$ay == "1"),
      sum(data_2023$ay == "2"),
      sum(data_2023$ay == "3"),
      sum(data_2023$ay == "4"),
      sum(data_2023$ay == "5"),
      sum(data_2023$ay == "6"),
      sum(data_2023$ay == "7"),
      sum(data_2023$ay == "8"),
      sum(data_2023$ay == "9"),
      sum(data_2023$ay == "10"),
      sum(data_2023$ay == "11"),
      sum(data_2023$ay == "12")
    )

    monthly_data <- data.frame(month = months, Total = total_values)
    ```

-   Then we drew a bar chart using this data that we organized.

    ```{r}
    library(ggplot2)
    ggplot(monthly_data, aes(x = factor(month), y =Total)) +
      geom_bar(stat = "identity",width = 0.7, fill = "purple") +
      labs(title = "Monthly Accident Numbers ", x = "Months", y = "Number of Accidents") +
      theme_minimal()
    ```

-   This bar chart shows the distribution of accidents by month. While March is the month with the most accidents, April and May have more accidents than other months. The high number of accidents in spring may be due to poor weather conditions or increased travel. The number of accidents peaks in spring and early summer and gradually decreases from August to November. This may be due to the return of tourists after the holidays are over and the weather cools down again.

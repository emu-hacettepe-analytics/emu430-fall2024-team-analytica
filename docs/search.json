[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Team Analytica",
    "section": "",
    "text": "This is our project webpage.\nPlease stay tuned to follow our project activities.\n\n\n\n\n\n\n\nTEAM MEMBERS\n\nYazel Şahin\nBilge Karaca\nBerfin Alsan\nAysu Soylu\nTuba Kızgın\nArzu Alakel\n\n\n\nPROJECT TOPIC\nTraffic accidents pose a significant challenge for cities, affecting safety, traffic flow, and public well-being. To better understand the dynamics of traffic accidents in İzmir, we utilized the data set titled “İzmir Metropolitan Municipality Defective, Accident Vehicle Data”, published on the İzmir Metropolitan Municipality Open Data Portal. This data set provides valuable information such as the date, type, time, and destination of traffic accidents that occurred within the metropolitan area.\nThe primary aim of this project is to analyze and interpret the data to uncover patterns, identify critical problem areas, and offer insights that can contribute to improved traffic management and accident prevention strategies. By leveraging this data set, we aim to address several key questions.\n\n\nKEY TAKEAWAYS\nAccident Prone Destinations: Which directions experience the highest number of accidents, and what factors may contribute to these trends?\nDate-Based Accident Patterns: Which date ranges see the highest frequency of accidents? Are there specific days or months with consistently high rates?\nTime-Based Trends: What time ranges during the day are most accident-prone? How do these patterns correlate with daily traffic flows and rush hours?\nResponse Time Trends: How efficient are interventions in terms of response time? Are there significant variations across different times or locations?\nInfluence of Special Days, Seasons, and Monthly Accident Trends: How do events such as holidays or seasonal changes affect the frequency and nature of accidents? What kind of a picture can be observed in the monthly accident numbers? Are there seasonal trends?\nBy analyzing these questions, we aim to provide a comprehensive understanding of traffic accidents in İzmir. The findings from this project can offer actionable insights to policymakers, traffic authorities, and urban planners, helping them implement targeted measures to enhance road safety, reduce accidents, and improve traffic efficiency in the city.\nThis project demonstrates how open data can serve as a powerful tool for addressing real-world challenges, fostering evidence-based decision-making, and promoting a safer city for all residents.\n\n\nDATA SET\nİzmir Metropolitan Municipality Defective, Accident Vehicle Data\n\n\nPROJECT TEASER\nTeaser\n\n\n\n\n Back to top"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "Analysis",
    "section": "",
    "text": "KEY TAKEAWAYS\n\nWe can see that the most accidents occur in “Merkez” ,“Bornova”, “Gaziemir”, “Konak” and “Çiğli”.\nWe found out which day the most accidents happened. It is “22 June of 2023”.\nOur analysis revealed that the accident density increased in regions such as “Bornova”, “Gaziemir” and “Merkez”, especially during rush hour.\nWe found that, the average response time of most destinations is concentrated between 20-30 minutes, which shows general effective responses.”Heykel,” “Çeşme,” and “Göztepe” show consistent distributions and predictable response times, demonstrating operational stability.\nWe found that, while “March” is the month with the most accidents, “April” and “May” have more accidents than other months. The high number of accidents in spring may be due to poor weather conditions or increased travel.\n\n\n\nANALYSIS OF THE DATA SET\n\n\nCode\ndata_2023 &lt;- data_new %&gt;%\n  mutate(TARIH = as.Date(TARIH, format = \"%Y-%m-%d\")) %&gt;%  # Changing date format to yyyy-mm-dd \n  filter(year(TARIH) == 2023)\n\ndatatable(data_2023, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Accident Data of Izmir  for the Year 2023\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(data_2023), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'});\n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nBy using the “data_new” data set, we created the “data_2023”.In this data set, we can see the accidents that occurred in 2023 filtered.\n\n\n\nCode\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(ISTIKAMET_SAYISI = as.numeric(factor(ISTIKAMET)))\ngrouped_data_2 &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET) %&gt;%  \n  summarise(Total_Accidents = n())\ndatatable(grouped_data_2, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Direction (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(grouped_data_2), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nBy making a grouping of the accidents that took place in 2023 according to the directions, we examined how many accidents were made in which direction.\n\n\n\nCode\nsorted_grouped_data &lt;- grouped_data_2 %&gt;%\n  arrange(desc(Total_Accidents))\ndatatable(sorted_grouped_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Direction (2023) - Descending Order\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_grouped_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe have sorted the accident numbers by destination points.\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(sorted_grouped_data, aes(x = reorder(ISTIKAMET, Total_Accidents), y = Total_Accidents)) +\n  geom_bar(stat = \"identity\", fill = \"purple\", color = \"black\") +\n  coord_flip() +  \n  labs(title = \"Distribution of Accidents According to Directions (2023)\", x = \"Direction\", y = \"Frequency\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 6))\n\n\n\n\n\n\n\n\n\n\nWe have created a bar plot showing the distribution according to directions using our data set, the accident numbers of which have already been sorted to decreasing order.We can see that the most accidents occur in Merkez ,Bornova, Gaziemir, Konak and Çiğli.\n\n\n\nCode\nlibrary(dplyr)\naccidents_date &lt;- data_2023 %&gt;%\n  group_by(TARIH) %&gt;%  \n  summarise(Accident_Number = n())\ndatatable(accidents_date, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Date (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(accidents_date), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe created a data set named “accidents_date” showing how many accidents happened on what date.\n\n\n\nCode\nlibrary(dplyr)\nmost_accidents_date &lt;- accidents_date %&gt;%\n  filter(Accident_Number == max(Accident_Number)) %&gt;%  # The date(s) with most accidents\n  pull(TARIH)\nmost_accidents_date\n\n\n[1] \"2023-06-22\"\n\n\n\nWe found out which day the most accidents happened. It is 22 June of 2023.\n\n\n\nCode\nsorted_accidents_date &lt;-accidents_date %&gt;%\n  arrange(desc(Accident_Number))\ndatatable(sorted_accidents_date, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Sequential Distribution of Accidents by Date (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_accidents_date), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe sorted these numbers in descending order and collect them in a data set named “sorted_accidents_date”. Here you can also see the ten days with the most accidents.\n\n\n\nCode\ndestination_accidents &lt;- data_2023 %&gt;%\n  filter(TARIH %in% most_accidents_date) %&gt;%  \n  group_by(ISTIKAMET) %&gt;%  #Grouping by directions\n  summarise(Accident_Number = n()) %&gt;%  \n  arrange(desc(Accident_Number)) \ndatatable(destination_accidents, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Accidents According to the Direction of the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(destination_accidents), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nOn June 22, 2023, the day of the most accidents, we collected how many accidents were caused while going to which direction in the data set named “destination_accidents”.\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(destination_accidents, aes(x = reorder(ISTIKAMET, Accident_Number), y = Accident_Number)) +\n  geom_bar(stat = \"identity\", fill = \"brown\", color = \"black\") +\n  labs(title = \"Accidents According to Directions on the Dates with the Most Accidents\", x = \"Destination\", y = \"Number of Accidents\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn order to better see the distribution, we had a bar plot drawn according to the direction.As we saw in the previous bar plot, the first three directions are again “Merkez”,“Gaziemir” and “Bornova”.\n\n\n\nCode\nlibrary(dplyr)\ntop_5_most_accident_dates &lt;- accidents_date %&gt;%\n  arrange(desc(Accident_Number)) %&gt;%  \n  slice(1:5) %&gt;%  #Selecting the first 5 rows\n  pull(TARIH)\ntop_5_most_accident_dates\n\n\n[1] \"2023-06-22\" \"2023-04-07\" \"2023-03-03\" \"2023-06-23\" \"2023-07-28\"\n\n\n\nIn our studies that we have done so far, we have found that the number of accidents is usually higher in the same directions.To better understand this, we also examine the first five days with the most accidents. With the help of this code, we learn about the five days with the most accidents.\n\n\n\nCode\ndestination_accidents_top_5 &lt;- data_2023 %&gt;%\n  filter(TARIH %in% top_5_most_accident_dates) %&gt;%  \n  group_by(ISTIKAMET) %&gt;%  \n  summarise(Accident_Number = n()) %&gt;%  # Calculating the accident number for each destination point.\n  arrange(desc(Accident_Number))\ndatatable(destination_accidents_top_5, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Directions on the 5 Days with the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(destination_accidents_top_5), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe have collected the distribution of the five most accident days according to the directions in the data set named “destination_accidents_top_5” and sorted them in descending order.\n\n\n\nCode\naccidents_date_destination &lt;- data_2023 %&gt;%\n  filter(TARIH %in% top_5_most_accident_dates) %&gt;%  \n  group_by(TARIH, ISTIKAMET) %&gt;%  # Grouping by date and destination \n  summarise(Accident_Number = n()) %&gt;%  # Calculating the number of accidents for each group\n  arrange(TARIH, desc(Accident_Number))  \ndatatable(accidents_date_destination, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Directions and Accidents on the 5 Dates with the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(accidents_date_destination), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWith the help of this code, we have grouped the accidents on the five days with the most accidents according to the date and direction and sorted each date in descending order. and again, as we expected, the first three directions on three of the five days are “Merkez”, “Gaziemir”, “Bornova”. in last two days, althought places of Bornova and Gaziemir differs, merkez stays at the top.\n\n\n\nCode\nlibrary(dplyr)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(TYPE_NUMBER = as.numeric(factor(TUR)))\ngrouped_data_type &lt;- data_2023 %&gt;%\n  group_by(TUR) %&gt;%  # Ture göre gruplama\n  summarise(Accident_Type = n())\nsorted_grouped_type_data &lt;- grouped_data_type %&gt;%\n  arrange(desc(Accident_Type))\ndatatable(sorted_grouped_type_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Sequential Distribution of Accident Types (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_grouped_type_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWith the help of these codes, we have obtained the number of accidents according to different types.\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(sorted_grouped_type_data, aes(x = reorder(TUR, Accident_Type), y = Accident_Type)) +\n  geom_bar(stat = \"identity\", fill = \"green\", color = \"black\") +\n  coord_flip() +  \n  labs(title = \"Distribution of Accidents According to Types (2023)\", x = \"Accident Types\", y = \"Frequency\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nThe bar plot shows that most of accidents end up with material damage. Other major types of accidents that occur mostly are accidents with malfunction and accidents with injuries. also accidents with rolling over and being out of gas occur least.\n\n\n\nCode\nlibrary(dplyr)\ndata_sorted &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(mean_gecen_sure = mean(GECEN_SURE, na.rm = TRUE)) %&gt;%\n  arrange(desc(mean_gecen_sure))\n\ndata_2023$ISTIKAMET &lt;- factor(data_2023$ISTIKAMET, levels = data_sorted$ISTIKAMET)\nlibrary(ggplot2)\n\nggplot(data_2023, aes(x = ISTIKAMET, y = GECEN_SURE)) +\n  geom_boxplot(fill = \"lightblue\", color = \"darkblue\", outlier.color = \"red\", outlier.size = 2) +\n  labs(\n    title = \"Response Time By Destinations\",\n    x = \"Destination\",\n    y = \"Response Time\"\n  ) +\n  theme_minimal() + \n  theme(\n    axis.text.x = element_text(angle = 45,size=6, hjust = 1),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.text = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\nBy utilizing the data we obtained, we analyzed how response times vary based on destinations and types of accidents, as well as how many accidents are distributed across destinations and time of day.\nThe Response Time By Destinations plot analyzes response times at different destinations, providing important information on median, average and variability.\nWhen we examine the plot, the average response time of most destinations is concentrated between 20-30 minutes, which shows general effective responses.”Heykel,” “Çeşme,” and “Göztepe” show consistent distributions and predictable response times, demonstrating operational stability.”Buca” and “Havalimanı” have wider distributions and higher averages, reflecting delays and inconsistencies.”Merkez” exhibits significant variability and outliers, leading to increased average response times.\nWe examined the distribution of average response time according to accident types with a violin plot.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(TUR = case_when(\n    TUR %in% c(\"Ölümlü Kaza Kaza\", \"Ölümlü Kaza Kaza Kaza Kaza Kaza\", \"Ölümlü Kaza Kaza Kaza Kaza Kaza Kaza\") ~ \"Ölümlü Kaza\",\n    TRUE ~ TUR  \n  ))\n\nggplot(data_2023, aes(x = TUR, y = ORTALAMA_GECEN_SURE)) +\n  geom_violin(fill = \"lightgreen\", color = \"darkgreen\") +\n  labs(\n    title = \"Average Response Time By Accident Types\",\n    x = \"Accident Type\",\n    y = \"Average Response Time\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")\n  )  \n\n\n\n\n\n\n\n\n\n\nMost accident types have response times concentrated between 20–30 minutes, indicating operational efficiency. Accidents like “Arızalı,” “Yakıt Bitimi,” and “Patlak Lastik” show the shortest and most consistent response times, with violin plots densely concentrated at lower durations. “Ölümlü Kaza” stands out with longer response times and broader distributions, reflecting the complexity of these cases.”Yaralanmalı Kaza” has the widest distribution, indicating varied response times and highlighting areas for improvement in consistency.\nWe examined the distribution of accidents according to destinations during the day using a heatmap chart.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(\n    HOUR = hour(as.POSIXct(KAZA_ZAMANI)), \n    TIME_PERIOD = ifelse(HOUR &gt;= 8 & HOUR &lt; 20, \"Day (8 AM - 8 PM)\", \"Night (8 PM - 8 AM)\")  \n  )\n\nheatmap_data &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET, HOUR) %&gt;%\n  summarise(kaza_sayisi = n(), .groups = \"drop\") \n\n# Heatmap oluşturma\nggplot(heatmap_data, aes(x = HOUR, y = ISTIKAMET, fill = kaza_sayisi)) +\n  geom_tile(color = \"white\") +  # Hücreler arasına beyaz çizgi\n  scale_fill_gradientn(\n    colors = c(\"lightblue\", \"yellow\", \"red\"),\n    name = \"Number of Accidents\"\n  ) +  # Renk skalasını belirle\n  labs(\n    title = \"Accidents Throughout the Day by Destination\",\n    subtitle = \"Comparison of accident numbers across hours and destinations\",\n    x = \"Hour of the Day\",\n    y = \"Destination\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),  \n    plot.subtitle = element_text(hjust = 0.5, size = 12),  \n    axis.text.x = element_text(size = 10),  \n    axis.text.y = element_text(size = 6.5), \n    legend.position = \"right\",  \n    legend.text = element_text(size = 10),  \n    legend.title = element_text(size = 12) \n  )\n\n\n\n\n\n\n\n\n\n\nCertain times of the day (e.g., morning and evening commute hours) show increased accident intensity in specific destinations. Destinations such as “Bornova”, “Gaziemir”, and “Merkez” show high accident intensity. The red zones in these areas indicate a higher number of accidents, especially during the morning and evening rush hours. Destinations such as “Tersane”, “Göztepe”, and “Heykel” have fewer accidents and a more evenly distributed pattern.\nIn another section, we tried to determine whether there is a relationship between the monthly accident numbers in Izmir.\n\n\nCode\nlibrary(DT)\n\n# Data hazırlama\ndata_new$tarih &lt;- as.Date(data_new$TARIH, format = \"%Y-%m-%d\")\n\n# 2023 yılı verilerini filtreleme\ndata_2023 &lt;- subset(data_new, format(data_new$tarih, \"%Y\") == \"2023\")\n\ndata_2023$ay &lt;- format(as.Date(data_2023$tarih), \"%m\") # Ay bilgisi\ndata_2023$ay &lt;- as.numeric(data_2023$ay)\n\n# Aylık toplamları hesaplama\nmonths &lt;- 1:12\ntotal_values &lt;- c(\n  sum(data_2023$ay == 1),\n  sum(data_2023$ay == 2),\n  sum(data_2023$ay == 3),\n  sum(data_2023$ay == 4),\n  sum(data_2023$ay == 5),\n  sum(data_2023$ay == 6),\n  sum(data_2023$ay == 7),\n  sum(data_2023$ay == 8),\n  sum(data_2023$ay == 9),\n  sum(data_2023$ay == 10),\n  sum(data_2023$ay == 11),\n  sum(data_2023$ay == 12)\n)\n\nmonthly_data &lt;- data.frame(month = months, Total = total_values)\n\n# Etkileşimli tablo oluşturma\ndatatable(monthly_data, \n          options = list(pageLength = 12, scrollX = TRUE), \n          caption = \"Monthly Distribution of Accidents (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(monthly_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nThen we drew a bar chart using this data that we organized.\n\n\nCode\nlibrary(ggplot2)\nggplot(monthly_data, aes(x = factor(month), y =Total)) +\n  geom_bar(stat = \"identity\",width = 0.7, fill = \"purple\") +\n  labs(title = \"Monthly Accident Numbers \", x = \"Months\", y = \"Number of Accidents\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis bar chart shows the distribution of accidents by month. While March is the month with the most accidents, April and May have more accidents than other months. The high number of accidents in spring may be due to poor weather conditions or increased travel. The number of accidents peaks in spring and early summer and gradually decreases from August to November. This may be due to the return of tourists after the holidays are over and the weather cools down again.\nAnother graph is related to the daily accident numbers.\n\n\nCode\nlibrary(dplyr)\nlibrary(DT)\n\n# Günlük kaza sayısı hesaplama ve ay, gün bilgilerini ekleme\ndaily_accident &lt;- data_2023 %&gt;%\n  group_by(TARIH) %&gt;%\n  summarise(daily_accident = n(), .groups = \"drop\") %&gt;%\n  mutate(\n    month = format(as.Date(TARIH), \"%B\"),\n    Gun = as.numeric(format(as.Date(TARIH), \"%d\"))\n  )\n\n# Ay bazında zirve noktalarını bulma\npeak_points &lt;- daily_accident %&gt;%\n  group_by(month) %&gt;%\n  filter(daily_accident == max(daily_accident, na.rm = TRUE))\n\n# Tablo oluşturma\ndatatable(\n  peak_points,\n  options = list(\n    pageLength = 10,\n    scrollX = TRUE,\n    columnDefs = list(list(className = 'dt-center', targets = \"_all\"))\n  ),\n  caption = \"Monthly Peak Points: Days with the Highest Number of Accidents\"\n) %&gt;%\n  DT::formatStyle(\n    columns = colnames(peak_points),\n    fontSize = '10px'\n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'});\n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nThe purpose of choosing this graph was to determine whether the number of accidents would increase or peak on special days or holidays. But the result was not quite as we expected. For example, while the date of Ramadan holiday is April 21, the day with the most accidents in that month is April 7.\n\n\nCode\nlibrary(ggplot2)\nggplot(daily_accident, aes(x = Gun, y = daily_accident)) +\n  geom_line(color = \"black\", linewidth = 0.5) + \n  geom_point(color = \"red\", size = 1) + \n  geom_point(data = peak_points, aes(x = Gun, y = daily_accident),\n             color = \"purple\", size = 2.5) +\n  facet_wrap(~month, scales = \"free_y\", ncol = 3) +\n  labs(title = \"Monthly Accident Number\",\n       x = \"Day\",\n       y = \"Number of Accidents\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        strip.text = element_text(size = 10, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(DT)\n\n# Cleaning missing datas\ndata_2023 &lt;- data_2023 %&gt;%\n  filter(!is.na(ISTIKAMET) & !is.na(TUR) & ISTIKAMET != \"\")\n\n# Creating facet data variable\nfacet_data &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET, TUR) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Controlling facet data\ndatatable(facet_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Facet Data (ISTIKAMET and TUR Distribution)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(facet_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nCode\n# Finding top 10 directions in terms of accidents\ntop_istikamets &lt;- facet_data %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(total_count = sum(count)) %&gt;%\n  arrange(desc(total_count)) %&gt;%\n  slice(1:10) %&gt;%\n  pull(ISTIKAMET)\n\n# Checking if the code above true\nprint(top_istikamets)\n\n\n [1] \"Merkez\"     \"Bornova\"    \"Gaziemir\"   \"Konak\"      \"Çiğli\"     \n [6] \"Karabağlar\" \"Marina\"     \"Havalimanı\" \"Karşıyaka\"  \"Kemalpaşa\" \n\n\nCode\n# Now filtering top directions\nfiltered_data &lt;- facet_data %&gt;% filter(ISTIKAMET %in% top_istikamets)\n\n# Checking filtered directions\ndatatable(filtered_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Filtered Data for Top 10 Directions\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(filtered_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nCode\n# Creating facet grid graph\nggplot(filtered_data, aes(x = ISTIKAMET, y = count, fill = TUR)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(TUR ~ ., scales = \"free_y\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text.y = element_text(angle = 0, face = \"bold\")\n  ) +\n  labs(\n    title = \"Top 10 Directions with the Most Accidents and Accident Type Distribution\",\n    x = \"Direction\",\n    y = \"Number of Accidents\",\n    fill = \"Type of Accidents\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe graph demonstrates that “Material Damage (Maddi Hasarlı)” and “Breakdown (Arızalı)” accidents are the most frequent across the analyzed directions. These types dominate the overall accident distribution.\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "analysis.html#analysis-of-the-data-set",
    "href": "analysis.html#analysis-of-the-data-set",
    "title": "Analysis",
    "section": "",
    "text": "Code\ndata_2023 &lt;- data_new %&gt;%\n  mutate(TARIH = as.Date(TARIH, format = \"%Y-%m-%d\")) %&gt;%  # Changing date format to yyyy-mm-dd \n  filter(year(TARIH) == 2023)\n\ndatatable(data_2023, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Accident Data of Izmir  for the Year 2023\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(data_2023), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'});\n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nBy using the “data_new” data set, we created the “data_2023”.In this data set, we can see the accidents that occurred in 2023 filtered.\n\n\n\nCode\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(ISTIKAMET_SAYISI = as.numeric(factor(ISTIKAMET)))\ngrouped_data_2 &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET) %&gt;%  \n  summarise(Total_Accidents = n())\ndatatable(grouped_data_2, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Direction (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(grouped_data_2), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nBy making a grouping of the accidents that took place in 2023 according to the directions, we examined how many accidents were made in which direction.\n\n\n\nCode\nsorted_grouped_data &lt;- grouped_data_2 %&gt;%\n  arrange(desc(Total_Accidents))\ndatatable(sorted_grouped_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Direction (2023) - Descending Order\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_grouped_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe have sorted the accident numbers by destination points.\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(sorted_grouped_data, aes(x = reorder(ISTIKAMET, Total_Accidents), y = Total_Accidents)) +\n  geom_bar(stat = \"identity\", fill = \"purple\", color = \"black\") +\n  coord_flip() +  \n  labs(title = \"Distribution of Accidents According to Directions (2023)\", x = \"Direction\", y = \"Frequency\") +\n  theme_minimal() +\n  theme(axis.text.y = element_text(size = 6))\n\n\n\n\n\n\n\n\n\n\nWe have created a bar plot showing the distribution according to directions using our data set, the accident numbers of which have already been sorted to decreasing order.We can see that the most accidents occur in Merkez ,Bornova, Gaziemir, Konak and Çiğli.\n\n\n\nCode\nlibrary(dplyr)\naccidents_date &lt;- data_2023 %&gt;%\n  group_by(TARIH) %&gt;%  \n  summarise(Accident_Number = n())\ndatatable(accidents_date, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Number of Accidents by Date (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(accidents_date), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe created a data set named “accidents_date” showing how many accidents happened on what date.\n\n\n\nCode\nlibrary(dplyr)\nmost_accidents_date &lt;- accidents_date %&gt;%\n  filter(Accident_Number == max(Accident_Number)) %&gt;%  # The date(s) with most accidents\n  pull(TARIH)\nmost_accidents_date\n\n\n[1] \"2023-06-22\"\n\n\n\nWe found out which day the most accidents happened.It is 22 June of 2023.\n\n\n\nCode\nsorted_accidents_date &lt;-accidents_date %&gt;%\n  arrange(desc(Accident_Number))\ndatatable(sorted_accidents_date, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Sequential Distribution of Accidents by Date (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_accidents_date), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe sorted these numbers in descending order and collect them in a data set named “sorted_accidents_date”. Here you can also see the ten days with the most accidents.\n\n\n\nCode\ndestination_accidents &lt;- data_2023 %&gt;%\n  filter(TARIH %in% most_accidents_date) %&gt;%  \n  group_by(ISTIKAMET) %&gt;%  #Grouping by directions\n  summarise(Accident_Number = n()) %&gt;%  \n  arrange(desc(Accident_Number)) \ndatatable(destination_accidents, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Accidents According to the Direction of the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(destination_accidents), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nOn June 22, 2023, the day of the most accidents, we collected how many accidents were caused while going to which direction in the data set named “destination_accidents”.\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(destination_accidents, aes(x = reorder(ISTIKAMET, Accident_Number), y = Accident_Number)) +\n  geom_bar(stat = \"identity\", fill = \"brown\", color = \"black\") +\n  labs(title = \"Accidents According to Directions on the Dates with the Most Accidents\", x = \"Destination\", y = \"Number of Accidents\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nIn order to better see the distribution, we had a bar plot drawn according to the direction.As we saw in the previous bar plot, the first three directions are again “Merkez”,“Gaziemir” and “Bornova”.\n\n\n\nCode\nlibrary(dplyr)\ntop_5_most_accident_dates &lt;- accidents_date %&gt;%\n  arrange(desc(Accident_Number)) %&gt;%  \n  slice(1:5) %&gt;%  #Selecting the first 5 rows\n  pull(TARIH)\ntop_5_most_accident_dates\n\n\n[1] \"2023-06-22\" \"2023-04-07\" \"2023-03-03\" \"2023-06-23\" \"2023-07-28\"\n\n\n\nIn our studies that we have done so far, we have found that the number of accidents is usually higher in the same directions.To better understand this, we also examine the first five days with the most accidentsWith the help of this code, we learn about the five days with the most accidents.\n\n\n\nCode\ndestination_accidents_top_5 &lt;- data_2023 %&gt;%\n  filter(TARIH %in% top_5_most_accident_dates) %&gt;%  \n  group_by(ISTIKAMET) %&gt;%  \n  summarise(Accident_Number = n()) %&gt;%  # Calculating the accident number for each destination point.\n  arrange(desc(Accident_Number))\ndatatable(destination_accidents_top_5, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Directions on the 5 Days with the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(destination_accidents_top_5), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWe have collected the distribution of the five most accident days according to the directions in the data set named “destination_accidents_top_5” and sorted them in descending order.\n\n\n\nCode\naccidents_date_destination &lt;- data_2023 %&gt;%\n  filter(TARIH %in% top_5_most_accident_dates) %&gt;%  \n  group_by(TARIH, ISTIKAMET) %&gt;%  # Grouping by date and destination \n  summarise(Accident_Number = n()) %&gt;%  # Calculating the number of accidents for each group\n  arrange(TARIH, desc(Accident_Number))  \ndatatable(accidents_date_destination, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Directions and Accidents on the 5 Dates with the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(accidents_date_destination), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\nWith the help of this code, we have grouped the accidents on the five days with the most accidents according to the date and direction and sorted each date in descending order. and again, as we expected, the first three directions on three of the five days are “Merkez”, “Gaziemir”, “Bornova”, while the remaining two days “Merkez” and “Gaziemir” are in the first two places.\n\n\n\nCode\nlibrary(dplyr)\ndata_sorted &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(mean_gecen_sure = mean(GECEN_SURE, na.rm = TRUE)) %&gt;%\n  arrange(desc(mean_gecen_sure))\n\ndata_2023$ISTIKAMET &lt;- factor(data_2023$ISTIKAMET, levels = data_sorted$ISTIKAMET)\nlibrary(ggplot2)\n\nggplot(data_2023, aes(x = ISTIKAMET, y = GECEN_SURE)) +\n  geom_boxplot(fill = \"lightblue\", color = \"darkblue\", outlier.color = \"red\", outlier.size = 2) +\n  labs(\n    title = \"Response Time By Destinations\",\n    x = \"Destination\",\n    y = \"Response Time\"\n  ) +\n  theme_minimal() + \n  theme(\n    axis.text.x = element_text(angle = 45,size=6, hjust = 1),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n    axis.text = element_text(size = 10)\n  )\n\n\n\n\n\n\n\n\n\n\nBy utilizing the data we obtained, we analyzed how response times vary based on destinations and types of accidents, as well as how many accidents are distributed across destinations and time of day.\nThe Response Time By Destinations plot analyzes response times at different destinations, providing important information on median, average and variability.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(DT)\n\n# 1. Eksik veya hatalı verileri temizleyin\ndata_2023 &lt;- data_2023 %&gt;%\n  filter(!is.na(ISTIKAMET) & !is.na(TUR) & ISTIKAMET != \"\")\n\n# 2. Facet data oluşturun\nfacet_data &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET, TUR) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Facet data etkileşimli tablo\ndatatable(facet_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Facet Data (ISTIKAMET and TUR Distribution)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(facet_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nCode\n# 3. En fazla kazanın olduğu ilk 10 istikameti belirleyin\ntop_istikamets &lt;- facet_data %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(total_count = sum(count)) %&gt;%\n  arrange(desc(total_count)) %&gt;%\n  slice(1:10)\n\n# İlk 10 istikamet etkileşimli tablo\ndatatable(top_istikamets, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Top 10 Directions with the Most Accidents\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(top_istikamets), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nCode\n# 4. Sadece bu istikametleri içeren veri kümesini oluşturun\nfiltered_data &lt;- facet_data %&gt;% filter(ISTIKAMET %in% top_istikamets$ISTIKAMET)\n\n# Filtrelenmiş veri etkileşimli tablo\ndatatable(filtered_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Filtered Data for Top 10 Directions\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(filtered_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nCode\n# 5. Grafik oluşturma\nggplot(filtered_data, aes(x = ISTIKAMET, y = count, fill = TUR)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(TUR ~ ., scales = \"free_y\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text.y = element_text(angle = 0, face = \"bold\")\n  ) +\n  labs(\n    title = \"Top 10 Directions with the Most Accidents and Accident Type Distribution\",\n    x = \"Direction\",\n    y = \"Number of Accidents\",\n    fill = \"Type of Accidents\"\n  )\n\n\n\n\n\n\n\n\n\n\nWhen we examine the plot, the average response time of most destinations is concentrated between 20-30 minutes, which shows general effective responses.”Heykel,” “Çeşme,” and “Göztepe” show consistent distributions and predictable response times, demonstrating operational stability.”Buca” and “Havalimanı” have wider distributions and higher averages, reflecting delays and inconsistencies.”Merkez” exhibits significant variability and outliers, leading to increased average response times.\nWe examined the distribution of average response time according to accident types with a violin plot.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(TUR = case_when(\n    TUR %in% c(\"Ölümlü Kaza Kaza Kaza Kaza Kaza\", \"Ölümlü Kaza Kaza Kaza Kaza Kaza Kaza\") ~ \"Ölümlü Kaza\",\n    TRUE ~ TUR  \n  ))\n\nggplot(data_2023, aes(x = TUR, y = ORTALAMA_GECEN_SURE)) +\n  geom_violin(fill = \"lightgreen\", color = \"darkgreen\") +\n  labs(\n    title = \"Average Response Time By Accident Types\",\n    x = \"Accident Type\",\n    y = \"Average Response Time\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")\n  )  \n\n\nWarning: Groups with fewer than two datapoints have been dropped.\ni Set `drop = FALSE` to consider such groups for position adjustment purposes.\n\n\n\n\n\n\n\n\n\n\nMost accident types have response times concentrated between 20–30 minutes, indicating operational efficiency. Accidents like “Arızalı,” “Yakıt Bitimi,” and “Patlak Lastik” show the shortest and most consistent response times, with violin plots densely concentrated at lower durations. “Ölümlü Kaza” stands out with longer response times and broader distributions, reflecting the complexity of these cases.”Yaralanmalı Kaza” has the widest distribution, indicating varied response times and highlighting areas for improvement in consistency.\nWe examined the distribution of accidents according to destinations during the day using a heatmap chart.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(lubridate)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(\n    HOUR = hour(as.POSIXct(KAZA_ZAMANI)), \n    TIME_PERIOD = ifelse(HOUR &gt;= 8 & HOUR &lt; 20, \"Day (8 AM - 8 PM)\", \"Night (8 PM - 8 AM)\")  \n  )\n\nheatmap_data &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET, HOUR) %&gt;%\n  summarise(kaza_sayisi = n(), .groups = \"drop\") \n\n# Heatmap oluşturma\nggplot(heatmap_data, aes(x = HOUR, y = ISTIKAMET, fill = kaza_sayisi)) +\n  geom_tile(color = \"white\") +  # Hücreler arasına beyaz çizgi\n  scale_fill_gradientn(\n    colors = c(\"lightblue\", \"yellow\", \"red\"),\n    name = \"Number of Accidents\"\n  ) +  # Renk skalasını belirle\n  labs(\n    title = \"Accidents Throughout the Day by Destination\",\n    subtitle = \"Comparison of accident numbers across hours and destinations\",\n    x = \"Hour of the Day\",\n    y = \"Destination\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 16),  \n    plot.subtitle = element_text(hjust = 0.5, size = 12),  \n    axis.text.x = element_text(size = 10),  \n    axis.text.y = element_text(size = 6.5), \n    legend.position = \"right\",  \n    legend.text = element_text(size = 10),  \n    legend.title = element_text(size = 12) \n  )\n\n\n\n\n\n\n\n\n\n\nCertain times of the day (e.g., morning and evening commute hours) show increased accident intensity in specific destinations. Destinations such as “Bornova”, “Gaziemir”, and “Merkez” show high accident intensity. The red zones in these areas indicate a higher number of accidents, especially during the morning and evening rush hours. Destinations such as “Tersane”, “Göztepe”, and “Heykel” have fewer accidents and a more evenly distributed pattern.\nIn another section, we tried to determine whether there is a relationship between the monthly accident numbers in Izmir.\n\n\nCode\n#If the column name is 'Date' and the format is \"%Y-%m-%d\":\ndata_new$tarih &lt;- as.Date(data_new$TARIH, format = \"%Y-%m-%d\")\n\n# Filtering 2023 data:\ndata_2023 &lt;- subset(data_new, format(data_new$tarih, \"%Y\") == \"2023\")\n\ndata_2023$ay &lt;- format(as.Date(data_2023$tarih), \"%m\") \n# Month information (01, 02, ...)\n\ndata_2023$ay &lt;- as.numeric(data_2023$ay)\n# Storing monthly totals in a vector\nmonths &lt;- 1:12\ntotal_values &lt;- c(\n  sum(data_2023$ay == \"1\"),\n  sum(data_2023$ay == \"2\"),\n  sum(data_2023$ay == \"3\"),\n  sum(data_2023$ay == \"4\"),\n  sum(data_2023$ay == \"5\"),\n  sum(data_2023$ay == \"6\"),\n  sum(data_2023$ay == \"7\"),\n  sum(data_2023$ay == \"8\"),\n  sum(data_2023$ay == \"9\"),\n  sum(data_2023$ay == \"10\"),\n  sum(data_2023$ay == \"11\"),\n  sum(data_2023$ay == \"12\")\n)\n\nmonthly_data &lt;- data.frame(month = months, Total = total_values)\n\ndatatable(monthly_data, \n          options = list(pageLength = 12, scrollX = TRUE), \n          caption = \"Monthly Distribution of Accidents (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(monthly_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\nThen we drew a bar chart using this data that we organized.\n\n\nCode\nlibrary(ggplot2)\nggplot(monthly_data, aes(x = factor(month), y =Total)) +\n  geom_bar(stat = \"identity\",width = 0.7, fill = \"purple\") +\n  labs(title = \"Monthly Accident Numbers \", x = \"Months\", y = \"Number of Accidents\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis bar chart shows the distribution of accidents by month. While March is the month with the most accidents, April and May have more accidents than other months. The high number of accidents in spring may be due to poor weather conditions or increased travel. The number of accidents peaks in spring and early summer and gradually decreases from August to November. This may be due to the return of tourists after the holidays are over and the weather cools down again.\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# 1. Eksik veya hatalı verileri temizleyin\ndata_2023 &lt;- data_2023 %&gt;%\n  filter(!is.na(ISTIKAMET) & !is.na(TUR) & ISTIKAMET != \"\")\n\n# 2. Facet data oluşturun\nfacet_data &lt;- data_2023 %&gt;%\n  group_by(ISTIKAMET, TUR) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\nprint(facet_data)\n\n\n# A tibble: 181 x 3\n   ISTIKAMET TUR              count\n   &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1 Adliye    Maddi Hasarlı        2\n 2 Adliye    Yaralanmalı Kaza     3\n 3 Alsancak  Arızalı             14\n 4 Alsancak  Maddi Hasarlı       42\n 5 Alsancak  Yanan Araç           1\n 6 Alsancak  Yaralanmalı Kaza    15\n 7 Alsancak  Zincirleme Kaza      1\n 8 Altındağ  Zincirleme Kaza      1\n 9 Balçova   Arızalı              1\n10 Balçova   Maddi Hasarlı       11\n# i 171 more rows\n\n\nCode\n# Facet data kontrol\nprint(facet_data)\n\n\n# A tibble: 181 x 3\n   ISTIKAMET TUR              count\n   &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1 Adliye    Maddi Hasarlı        2\n 2 Adliye    Yaralanmalı Kaza     3\n 3 Alsancak  Arızalı             14\n 4 Alsancak  Maddi Hasarlı       42\n 5 Alsancak  Yanan Araç           1\n 6 Alsancak  Yaralanmalı Kaza    15\n 7 Alsancak  Zincirleme Kaza      1\n 8 Altındağ  Zincirleme Kaza      1\n 9 Balçova   Arızalı              1\n10 Balçova   Maddi Hasarlı       11\n# i 171 more rows\n\n\nCode\n# 3. En fazla kazanın olduğu ilk 10 istikameti belirleyin\ntop_istikamets &lt;- facet_data %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(total_count = sum(count)) %&gt;%\n  arrange(desc(total_count)) %&gt;%\n  slice(1:10) %&gt;%\n  pull(ISTIKAMET)\n\n# İlk 10 istikamet kontrol\nprint(top_istikamets)\n\n\n [1] \"Merkez\"     \"Bornova\"    \"Gaziemir\"   \"Konak\"      \"Çiğli\"     \n [6] \"Karabağlar\" \"Marina\"     \"Havalimanı\" \"Karşıyaka\"  \"Kemalpaşa\" \n\n\nCode\n# 4. Sadece bu istikametleri içeren veri kümesini oluşturun\nfiltered_data &lt;- facet_data %&gt;% filter(ISTIKAMET %in% top_istikamets)\n\n# Filtrelenmiş veri kontrol\nprint(filtered_data)\n\n\n# A tibble: 62 x 3\n   ISTIKAMET TUR              count\n   &lt;chr&gt;     &lt;chr&gt;            &lt;int&gt;\n 1 Bornova   Arızalı            417\n 2 Bornova   Maddi Hasarlı      540\n 3 Bornova   Patlak Lastik        3\n 4 Bornova   Yanan Araç           1\n 5 Bornova   Yaralanmalı Kaza    66\n 6 Bornova   Zincirleme Kaza     31\n 7 Bornova   Ölümlü Kaza          3\n 8 Gaziemir  Arızalı            336\n 9 Gaziemir  Maddi Hasarlı      332\n10 Gaziemir  Yakıt Bitimi         1\n# i 52 more rows\n\n\nCode\n# 5. Facet Grid ile grafiği oluşturun\nggplot(filtered_data, aes(x = ISTIKAMET, y = count, fill = TUR)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(TUR ~ ., scales = \"free_y\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text.y = element_text(angle = 0, face = \"bold\")\n  ) +\n  labs(\n    title = \"Top 10 Directions with the Most Accidents and Accident Type Distribution\",\n    x = \"Direction\",\n    y = \"Number of Accidents\",\n    fill = \"Type of Accidents\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe graph demonstrates that “Material Damage (Maddi Hasarlı)” and “Breakdown (Arızalı)” accidents are the most frequent across the analyzed directions. These types dominate the overall accident distribution.\n\n\n\nCode\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(AY = format(TARIH, \"%B\"))  # Ay isimlerini çıkarma\n\n# Ay sıralamasını düzgün hale getirmek için bir faktör olarak tanımlama\ndata_2023$AY &lt;- factor(data_2023$AY, \n                       levels = c(\"January\", \"February\", \"March\", \"April\", \n                                  \"May\", \"June\", \"July\", \"August\", \n                                  \"September\", \"October\", \"November\", \"December\"))\n\n# Aylık dağılımı gruplandırma\nmonthly_data &lt;- data_2023 %&gt;%\n  group_by(AY, TUR) %&gt;%\n  summarise(count = n(), .groups = \"drop\")\n\n# Grafik oluşturma\nggplot(monthly_data, aes(x = AY, y = count, fill = TUR)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_grid(TUR ~ ., scales = \"free_y\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    strip.text.y = element_text(angle = 0, face = \"bold\")\n  ) +\n  labs(\n    title = \"Accident Distribution Monthly\",\n    x = \"Month\",\n    y = \"Number of Accident\",\n    fill = \"Type of Accident\"\n  )\n\n\n\n\n\n\n\n\n\n\nThe graph shows that accidents may intensify in certain seasons. For example, in the summer months (June, July, August), increased traffic density may lead to an increase in “Property Damage” or “Injury” accidents. In winter (December, January, February), worsening weather conditions may increase the number of “Chain Accidents(Zincirleme Kaza)” or “Defective Vehicle(Kusurlu Araç)” incidents.\n\n\n\nCode\nlibrary(dplyr)\n\ndata_2023 &lt;- data_2023 %&gt;%\n  mutate(TYPE_NUMBER = as.numeric(factor(TUR)))\ngrouped_data_type &lt;- data_2023 %&gt;%\n  group_by(TUR) %&gt;%  # Ture göre gruplama\n  summarise(Accident_Type = n())\nsorted_grouped_type_data &lt;- grouped_data_type %&gt;%\n  arrange(desc(Accident_Type))\n\ndatatable(sorted_grouped_type_data, \n          options = list(pageLength = 10, scrollX = TRUE), \n          caption = \"Sequential Distribution of Accident Types (2023)\") %&gt;%\n  DT::formatStyle(\n    columns = colnames(sorted_grouped_type_data), \n    fontSize = '10px'   \n  ) %&gt;%\n  htmlwidgets::onRender(\n    \"function(el, x) {\n        $(el).css({'width': '70%', 'height': '300px'});\n        $(el).find('th').css({'font-size': '10px'}); \n        $(el).find('.dataTables_length').css({'font-size': '10px'});\n        $(el).find('.dataTables_filter').css({'font-size': '10px'});\n        $(el).find('.dataTables_paginate').css({'font-size': '10px'});\n        $(el).find('.dataTables_info').css({'font-size': '10px'});\n    }\"\n  )\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(sorted_grouped_type_data, aes(x = reorder(TUR, Accident_Type), y = Accident_Type)) +\n  geom_bar(stat = \"identity\", fill = \"green\", color = \"black\") +\n  coord_flip() +  \n  labs(title = \"Distribution of Accidents According to Types (2023)\", x = \"Accident Types\", y = \"Frequency\") +\n  theme_minimal()"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data",
    "section": "",
    "text": "Data source: İzmir İli Arızalı, Kazalı Araç Verileri"
  },
  {
    "objectID": "data.html#libraries",
    "href": "data.html#libraries",
    "title": "Data",
    "section": "LIBRARIES",
    "text": "LIBRARIES\nlibrary(readxl)        # For reading Excel files\nlibrary(stringr)       # For string manipulation\nlibrary(dplyr)         # For data manipulation\nlibrary(lubridate)     # For date and time operations\nlibrary(ggplot2)       # For data visualization\nlibrary(DT)            # For user interaction"
  },
  {
    "objectID": "data.html#data-loading-and-general-informations",
    "href": "data.html#data-loading-and-general-informations",
    "title": "Data",
    "section": "DATA LOADING AND GENERAL INFORMATIONS",
    "text": "DATA LOADING AND GENERAL INFORMATIONS\n\n\nCode\n# Loading the data set\ndata_original &lt;- read_excel(\"izbb-kaza-ariza-verileri.xlsx\")\n\n\n\nFirst, we read our data containing the accident data with the read_excel function.\n\n\n\nCode\ndatatable(head(data_original), options = list(\n  pageLength = 10,\n  dom = 't'\n)) %&gt;%\n  formatStyle(\n    columns = colnames(head(data_original)),\n    fontSize = '9px',        \n    padding = '1px'          \n  )\n\n\n\n\n\n\n\nHere we see the first rows of our dataset. As stated in the table on the previous page, the columns indicate date, street, direction, location, type, accident time and intervention time, respectively.\n\n\n\nColumn Name\nDescription\n\n\nTARIH\nDate of the accident\n\n\nCADDE\nStreet information of the accident\n\n\nISTIKAMET\nDestination information of the accident\n\n\nKONUM\nLocation information of the accident\n\n\nTUR\nType of accident that occurred\n\n\nKAZA_ZAMANI\nTime of the accident\n\n\nMUDAHALE_ZAMANI\nTime when the vehicle was moved to safe area\n\n\n\n\n\n\nCode\nstr(data_original)\n\n\ntibble [17,788 x 7] (S3: tbl_df/tbl/data.frame)\n $ TARIH          : POSIXct[1:17788], format: \"2021-12-08\" \"2021-12-06\" ...\n $ CADDE          : chr [1:17788] \"Havalimanı Şoşesi\" \"Akçay Caddesi\" \"Akçay Caddesi\" \"Akçay Caddesi\" ...\n $ ISTIKAMET      : chr [1:17788] \"Evka-5\" \"Havalimanı\" \"Havalimanı\" \"Havalimanı\" ...\n $ KONUM          : chr [1:17788] \"Harmandalı Meydanı\" \"Esbaş Alt Geçit\" \"Sarnıç Alt Geçit Üzeri\" \"Serbest Bölge Alt Geçit Öncesi\" ...\n $ TUR            : chr [1:17788] \"Maddi Hasarlı\" \"Arızalı\" \"Maddi Hasarlı\" \"Arızalı\" ...\n $ KAZA_ZAMANI    : POSIXct[1:17788], format: \"1899-12-31 17:57:00\" \"1899-12-31 07:27:00\" ...\n $ MUDAHALE_ZAMANI: POSIXct[1:17788], format: \"1899-12-31 18:14:00\" \"1899-12-31 07:41:00\" ...\n\n\n\nHere we see general information about the dataframe. Our data has 7 columns and 17,788 rows. Street, direction, location and type columns are in character data type, date, accident time and intervention time columns are in POSIXct date data type.\n\n\n\nCode\n# How many NA in which column?\n\ncolSums(is.na(data_original))\n\n\n          TARIH           CADDE       ISTIKAMET           KONUM             TUR \n              0               0              16              14               0 \n    KAZA_ZAMANI MUDAHALE_ZAMANI \n              0            4400 \n\n\n\nHere we see how many NA values ​​there are in each column. There are 16 NA values ​​in the direction column and 4400 NA values ​​at the intervention time."
  },
  {
    "objectID": "data.html#na-and-string-processing",
    "href": "data.html#na-and-string-processing",
    "title": "Data",
    "section": "NA AND STRING PROCESSING",
    "text": "NA AND STRING PROCESSING\n\n\nCode\n# Delete NA ones in the ISTIKAMET column\n\ndata_new &lt;- data_original[!is.na(data_original$ISTIKAMET), ]\n\n\n\nWith this code we deleted all 16 NA values ​​in the direction column.\n\n\n\nCode\n# See unique destination names\n\nunique_istikamet &lt;- sort(unique(data_new$ISTIKAMET))\n\nhead(sort(unique_istikamet),10)\n\n\n [1] \"1. Sanayi\"           \"5. Sanayi\"           \"Adliye\"             \n [4] \"Adnan Kahveci Köprü\" \"Akıncılar\"           \"Alaybey\"            \n [7] \"alsancak\"            \"Alsancak\"            \"Alsancak Gar\"       \n[10] \"Alsancak İstikameti\"\n\n\nCode\nlength(unique_istikamet)\n\n\n[1] 148\n\n\n\nAs seen above, there are 148 different direction values ​​in our data set. Among these, there are values ​​such as “Alsancak”, “Alsancak Gar” and “Alsancak İstikameti” that are written differently but describe the same place.\n\n\n\nCode\n# String edits in destination names\n\ndata_new$ISTIKAMET &lt;- gsub(\"Alsancak|Alsancak İstikameti|Alsancak Gar|alsancak\", \"Alsancak\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Buca|Buca Heykel\", \"Buca\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Konak|Konak Tüneli|Konak İstikameti\", \"Konak\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Kemalpaşa|kemalpaşa|Kemalpaş\", \"Kemalpaşa\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Havalimanı|havalimanı\", \"Havalimanı\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"İnciraltı|İnciraltı İstikameti\", \"İnciraltı\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Üçkuyular|Üçkuyular Meydan\", \"Üçkuyular\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Sarnıç|Sarniç\", \"Sarnıç\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Fahrettin Altay|F.Altay|Fahrettin altay\", \"Fahrettin Altay\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Tersane|Tersanesi\", \"Tersane\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Otogar|Otogar Meydanı\", \"Otogar\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Basmane|Basmane Gar\", \"Basmane\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Pınarbaşı|Pınarbaşo\", \"Pınarbaşı\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Üçyol|üçyol|Üçyo\", \"Üçyol\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Karabağlar|karabağlar\", \"Karabağlar\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Konak|konak\", \"Konak\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Gündoğdu|Gündoğdu Mahallesi\", \"Gündoğdu\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Mahvel|Mahvel Kavşağı\", \"Mahvel\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Beyazevler|Beyaz Evler\", \"Beyazevler\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Adliye|Adliye Kavşağı\", \"Adliye\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Harmandalı|Harmandali\", \"Harmandalı\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Yıkık Kemer|Yıkıkkemer|Yıkıkker\", \"Yıkıkkemer\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Karşıa\", \"Karşıyaka\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Liman D Kapısı\", \"Liman\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"otogar\", \"Otogar\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"bornova\", \"Bornova\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Mai\", \"Mustafa Kemal Sahil\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Borsa|Borsa Kavşağı\", \"Borsa\", data_new$ISTIKAMET)\ndata_new$ISTIKAMET &lt;- gsub(\"Çevre Yolu|Çevreyolu\", \"Çevreyolu\", data_new$ISTIKAMET)\n\n\n\nIn this way, a string arrangement was made using the gsub function to collect similar or misspelled destination names into a single form.\n\n\n\nCode\n# Checking destination names\n\nunique_istikamet_new &lt;- sort(unique(data_new$ISTIKAMET))\n\nhead(sort(unique_istikamet_new),10)\n\n\n [1] \"1. Sanayi\"           \"5. Sanayi\"           \"Adliye\"             \n [4] \"Adnan Kahveci Köprü\" \"Akıncılar\"           \"Alaybey\"            \n [7] \"Alsancak\"            \"Altındağ\"            \"Altınyol\"           \n[10] \"Anıt\"               \n\n\nCode\nlength(unique_istikamet_new)\n\n\n[1] 123\n\n\n\nAs a result of this process, the number of unique direction values ​​​​has decreased to 123.\n\n\n\nCode\n# see unique accident type names\n\nunique_tur &lt;- sort(unique(data_new$TUR))\n\nhead(sort(unique_tur),10)\n\n\n [1] \"Adli Vaka\"            \"Ağır Vasıta\"          \"Arızalı\"             \n [4] \"Asfalt Çalışması\"     \"Aşan Yükseklik\"       \"Bekleme\"             \n [7] \"Futbol Maçı\"          \"Heyelan\"              \"İzsu Çalışması\"      \n[10] \"Konteynır Devrilmesi\"\n\n\nCode\nlength(unique_tur)\n\n\n[1] 30\n\n\n\nThe same process was done for accident types. As seen here, there are 30 unique accident type names. These include similar expressions such as “maddi Hasarlı”, “Maddi Hasarlı”.\n\n\n\nCode\n# String edits in accident type names\n\ndata_new$TUR &lt;- gsub(\"maddi Hasarlı|Maddi Hasarlı|MAddi Hasarlı\", \"Maddi Hasarlı\", data_new$TUR)\ndata_new$TUR &lt;- gsub(\"Ölümlü|Ölümlü Kaza\", \"Ölümlü Kaza\", data_new$TUR)\ndata_new$TUR &lt;- gsub(\"Yakıtı Biten\", \"Yakıt Bitimi\", data_new$TUR)\ndata_new$TUR &lt;- gsub(\"Yangın\", \"Yanan Araç\", data_new$TUR)\ndata_new$TUR &lt;- gsub(\"yaralanmalı Kaza\", \"Yaralanmalı Kaza\", data_new$TUR)\n\n\n\nSimilar expressions are again replaced with the gsub function.\n\n\n\nCode\n# Checking accident type names\n\nunique_tur_new &lt;- sort(unique(data_new$TUR))\n\nhead(sort(unique_tur_new),10)\n\n\n [1] \"Adli Vaka\"            \"Ağır Vasıta\"          \"Arızalı\"             \n [4] \"Asfalt Çalışması\"     \"Aşan Yükseklik\"       \"Bekleme\"             \n [7] \"Futbol Maçı\"          \"Heyelan\"              \"İzsu Çalışması\"      \n[10] \"Konteynır Devrilmesi\"\n\n\nCode\nlength(unique_tur_new)\n\n\n[1] 24\n\n\n\nAs a result of this process, the number of unique accident types decreased to 24.\n\n\n\nCode\n# Calculate the number of data for each destination\n\ncounts &lt;- data_new %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  summarise(count = n())\n\n# Finding direction values with less than 5 data\n\nistikamet_to_remove &lt;- counts %&gt;%\n  filter(count &lt; 5) %&gt;%\n  pull(ISTIKAMET)\n\n# Delete them from the data set\n\ndata_new &lt;- data_new %&gt;%\n  filter(!ISTIKAMET %in% istikamet_to_remove)\n\ndatatable(head(data_new), options = list(\n  pageLength = 10,\n  dom = 't'\n)) %&gt;%\n  formatStyle(\n    columns = colnames(head(data_original)),\n    fontSize = '9px',        \n    padding = '1px'          \n  )\n\n\n\n\n\n\n\nThen, the data set was grouped according to the direction and the number of rows of data for each direction was found. Then, the directions with less than 5 data were determined and removed from the data set. As a result of the operations, there are 17,656 rows in the data set named data_new.\n\n\n\nCode\n# Calculate the time between accident time and intervention time and add it as a new column\n\ndata_new$GECEN_SURE &lt;- difftime(data_new$MUDAHALE_ZAMANI, data_new$KAZA_ZAMANI, units = \"mins\")\n\n# Taking into account the day difference for interventions arriving after midnight\n\ndata_new &lt;- data_new %&gt;%\n  mutate(\n    GECEN_SURE = ifelse(\n      MUDAHALE_ZAMANI &lt; KAZA_ZAMANI, \n      difftime(MUDAHALE_ZAMANI + days(1), KAZA_ZAMANI, units = \"mins\"),\n      difftime(MUDAHALE_ZAMANI, KAZA_ZAMANI, units = \"mins\")\n    )\n  )\n\ndatatable(head(data_new), options = list(\n  pageLength = 10,\n  dom = 't'\n)) %&gt;%\n  formatStyle(\n    columns = colnames(head(data_original)),\n    fontSize = '9px',        \n    padding = '1px'          \n  )\n\n\n\n\n\n\n\nLater, a new column named GECEN_SURE was added to the data set and in this row, the difference between the accident time and the intervention time was specified in minutes. There is also a section in the code to prevent the result from being negative in interventions after midnight.\n\n\n\nCode\n# Calculate the average response time for each destination\n\ndata_new &lt;- data_new %&gt;%\n  group_by(ISTIKAMET) %&gt;%\n  mutate(ORTALAMA_GECEN_SURE = mean(GECEN_SURE, na.rm = TRUE))\n\n# Fill each NA value for GECEN_SURE with the average time of the direction it is connected to\n\ndata_new &lt;- data_new %&gt;%\n  mutate(GECEN_SURE = ifelse(is.na(GECEN_SURE), ORTALAMA_GECEN_SURE, GECEN_SURE))\n\nsum(is.na(data_new$GECEN_SURE))\n\n\n[1] 0\n\n\n\nThen, the average of the elapsed time values ​​for each direction was found and added to the data as a new column named ORTALAMA_GECEN_SURE. Then, each NA value in the GECEN_SURE column was filled with the average time of the direction it belonged to. As a result of this process, it is seen that there is no empty data left in this column.\n\n\n\nCode\ndatatable(head(data_new), options = list(\n  pageLength = 10,\n  dom = 't'\n)) %&gt;%\n  formatStyle(\n    columns = colnames(head(data_original)),\n    fontSize = '9px',        \n    padding = '1px'          \n  )\n\n\n\n\n\n\n\nThe dataframe named data_new, which is the result of the NA and String Processing operations, can be used for analysis studies.\n\n\n\nCode\nsave(data_new, file = \"data_new.RData\")\n\n\n\nYou can access the .RData format of this dataset here: data_new.RData"
  }
]